// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package db

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM USERS WHERE USERNAME LIKE (?) OR EMAIL LIKE (?)
`

type DeleteUserParams struct {
	Username string
	Email    string
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.Username, arg.Email)
	return err
}

const getUsers = `-- name: GetUsers :one
SELECT username, email, is_admin, user_password, created_at FROM USERS WHERE USERNAME LIKE (?) OR EMAIL LIKE (?)
`

type GetUsersParams struct {
	Username string
	Email    string
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.UserPassword,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO USERS(USERNAME, EMAIL, IS_ADMIN, USER_PASSWORD, CREATED_AT) VALUES (?,?,?,?,?)
`

type InsertUserParams struct {
	Username     string
	Email        string
	IsAdmin      bool
	UserPassword string
	CreatedAt    string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.UserPassword,
		arg.CreatedAt,
	)
	return err
}

const isAdmin = `-- name: IsAdmin :one
SELECT username, email, is_admin, user_password, created_at FROm USERS WHERE USERNAME LIKE (?) OR EMAIL LIKE (?) AND IS_ADMIN = TRUE
`

type IsAdminParams struct {
	Username string
	Email    string
}

func (q *Queries) IsAdmin(ctx context.Context, arg IsAdminParams) (User, error) {
	row := q.db.QueryRowContext(ctx, isAdmin, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.UserPassword,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE USERS 
SET USERNAME = (?), EMAIL = (?), USER_PASSWORD = (?)
WHERE USERNAME LIKE (?) OR EMAIL LIKE (?)
`

type UpdateUserParams struct {
	Username     string
	Email        string
	UserPassword string
	Username_2   string
	Email_2      string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.UserPassword,
		arg.Username_2,
		arg.Email_2,
	)
	return err
}
